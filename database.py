import sqlite3
import logging
import os
from datetime import datetime
from typing import List, Dict, Optional

logger = logging.getLogger(__name__)

class Database:
    def __init__(self, db_path: str = 'data/bot.db'):
        self.db_path = db_path
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü"""
        try:
            os.makedirs(os.path.dirname(self.db_path), exist_ok=True)
            
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS users (
                        id INTEGER PRIMARY KEY,
                        username TEXT,
                        first_name TEXT,
                        last_name TEXT,
                        full_name TEXT,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        last_message_text TEXT,
                        last_message_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                ''')
                
                # –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS messages (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        user_id INTEGER NOT NULL,
                        text TEXT NOT NULL,
                        is_from_user BOOLEAN NOT NULL,
                        timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        bot_user_id INTEGER,
                        FOREIGN KEY (user_id) REFERENCES users (id),
                        FOREIGN KEY (bot_user_id) REFERENCES system_users (id)
                    )
                ''')
                
                # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–æ–±—â–∏–µ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã)
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS settings (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        key TEXT UNIQUE NOT NULL,
                        value TEXT,
                        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                ''')
                
                # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–∏—Å—Ç–µ–º—ã
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS system_users (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        username TEXT UNIQUE NOT NULL,
                        password_hash TEXT NOT NULL,
                        role TEXT DEFAULT 'user',
                        full_name TEXT,
                        email TEXT,
                        account_expires TIMESTAMP,
                        is_active BOOLEAN DEFAULT 1,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        last_login TIMESTAMP,
                        created_by INTEGER,
                        FOREIGN KEY (created_by) REFERENCES system_users (id)
                    )
                ''')
                
                # –¢–∞–±–ª–∏—Ü–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS user_settings (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        user_id INTEGER NOT NULL,
                        welcome_message TEXT DEFAULT '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã',
                        welcome_pdf_path TEXT DEFAULT '',
                        bot_name TEXT DEFAULT '–ú–æ–π –±–æ—Ç',
                        bot_description TEXT DEFAULT '',
                        start_command TEXT DEFAULT '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.',
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        FOREIGN KEY (user_id) REFERENCES system_users (id)
                    )
                ''')
                
                # –ú–∏–≥—Ä–∞—Ü–∏—è: –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ bot_user_id –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                try:
                    cursor.execute('ALTER TABLE messages ADD COLUMN bot_user_id INTEGER')
                    logger.info("–î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ bot_user_id –≤ —Ç–∞–±–ª–∏—Ü—É messages")
                except sqlite3.OperationalError:
                    # –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    pass
                
                # –û—á–∏—â–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                try:
                    cursor.execute('''
                        DELETE FROM users 
                        WHERE id IN (
                            SELECT id FROM users 
                            GROUP BY id 
                            HAVING COUNT(*) > 1
                        )
                    ''')
                    logger.info("–û—á–∏—â–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–µ–π: {e}")
                
                # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
                cursor.execute('CREATE INDEX IF NOT EXISTS idx_messages_user_id ON messages(user_id)')
                cursor.execute('CREATE INDEX IF NOT EXISTS idx_messages_timestamp ON messages(timestamp)')
                cursor.execute('CREATE INDEX IF NOT EXISTS idx_messages_bot_user_id ON messages(bot_user_id)')
                cursor.execute('CREATE INDEX IF NOT EXISTS idx_users_username ON users(username)')
                cursor.execute('CREATE INDEX IF NOT EXISTS idx_system_users_username ON system_users(username)')
                cursor.execute('CREATE INDEX IF NOT EXISTS idx_system_users_role ON system_users(role)')
                cursor.execute('CREATE INDEX IF NOT EXISTS idx_system_users_expires ON system_users(account_expires)')
                
                conn.commit()
                logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise
    
    def add_user(self, user_id: int, username: str = None, first_name: str = None, last_name: str = None) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                full_name = f"{first_name or ''} {last_name or ''}".strip()
                
                cursor.execute('''
                    INSERT OR REPLACE INTO users (id, username, first_name, last_name, full_name, last_activity)
                    VALUES (?, ?, ?, ?, ?, CURRENT_TIMESTAMP)
                ''', (user_id, username, first_name, last_name, full_name))
                
                conn.commit()
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î")
                return True
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    
    def get_user(self, user_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    SELECT id, username, first_name, last_name, full_name, created_at, last_activity
                    FROM users WHERE id = ?
                ''', (user_id,))
                
                row = cursor.fetchone()
                if row:
                    return {
                        'id': row[0],
                        'username': row[1],
                        'first_name': row[2],
                        'last_name': row[3],
                        'full_name': row[4],
                        'created_at': row[5],
                        'last_activity': row[6]
                    }
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return None
    
    def get_all_users(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    SELECT u.id, u.username, u.first_name, u.last_name, u.full_name, 
                           u.created_at, u.last_activity,
                           m.text as last_message_text, m.timestamp as last_message_time
                    FROM users u
                    LEFT JOIN (
                        SELECT user_id, text, timestamp,
                               ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY timestamp DESC) as rn
                        FROM messages
                    ) m ON u.id = m.user_id AND m.rn = 1
                    ORDER BY u.last_activity DESC
                ''')
                
                users = []
                for row in cursor.fetchall():
                    users.append({
                        'id': row[0],
                        'username': row[1],
                        'first_name': row[2],
                        'last_name': row[3],
                        'full_name': row[4],
                        'created_at': row[5],
                        'last_activity': row[6],
                        'last_message_text': row[7],
                        'last_message_time': row[8]
                    })
                
                return users
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []
    
    def add_message(self, user_id: int, text: str, is_from_user: bool = True, bot_user_id = None) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            logger.info(f"üîç Database.add_message: user_id={user_id}, text='{text[:50]}...', is_from_user={is_from_user}, bot_user_id={bot_user_id}")
            
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                cursor.execute('SELECT id FROM users WHERE id = ?', (user_id,))
                user_exists = cursor.fetchone()
                
                if not user_exists:
                    logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î, —Å–æ–∑–¥–∞–µ–º...")
                    cursor.execute('''
                        INSERT OR IGNORE INTO users (id, username, first_name, last_name, full_name)
                        VALUES (?, ?, ?, ?, ?)
                    ''', (user_id, f'user_{user_id}', '', '', f'User {user_id}'))
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                logger.info(f"üíæ –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î...")
                cursor.execute('''
                    INSERT INTO messages (user_id, text, is_from_user, timestamp, bot_user_id)
                    VALUES (?, ?, ?, CURRENT_TIMESTAMP, ?)
                ''', (user_id, text, is_from_user, bot_user_id))
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cursor.execute('''
                    UPDATE users SET last_activity = CURRENT_TIMESTAMP WHERE id = ?
                ''', (user_id,))
                
                conn.commit()
                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
                cursor.execute('''
                    SELECT COUNT(*) FROM messages 
                    WHERE user_id = ? AND bot_user_id = ?
                ''', (user_id, bot_user_id))
                count = cursor.fetchone()[0]
                logger.info(f"üìä –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å –±–æ—Ç–æ–º {bot_user_id}: {count}")
                
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            import traceback
            logger.error(f"üîç Traceback: {traceback.format_exc()}")
            return False
    
    def get_user_messages(self, user_id: int, limit: int = 100) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    SELECT id, text, is_from_user, timestamp
                    FROM messages 
                    WHERE user_id = ?
                    ORDER BY timestamp ASC
                    LIMIT ?
                ''', (user_id, limit))
                
                messages = []
                for row in cursor.fetchall():
                    messages.append({
                        'id': row[0],
                        'text': row[1],
                        'is_from_user': bool(row[2]),
                        'timestamp': row[3]
                    })
                
                return messages
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return []
    
    def get_setting(self, key: str) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                cursor.execute('SELECT value FROM settings WHERE key = ?', (key,))
                row = cursor.fetchone()
                
                return row[0] if row else None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {key}: {e}")
            return None
    
    def set_setting(self, key: str, value: str) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    INSERT OR REPLACE INTO settings (key, value, updated_at)
                    VALUES (?, ?, CURRENT_TIMESTAMP)
                ''', (key, value))
                
                conn.commit()
                return True
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {key}: {e}")
            return False
    
    def get_subscribers_count(self) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                cursor.execute('SELECT COUNT(*) FROM users')
                return cursor.fetchone()[0]
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")
            return 0
    
    def cleanup_old_messages(self, days: int = 30) -> int:
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    DELETE FROM messages 
                    WHERE timestamp < datetime('now', '-{} days')
                '''.format(days))
                
                deleted_count = cursor.rowcount
                conn.commit()
                
                logger.info(f"–£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
                return deleted_count
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return 0

    # ===== –ú–ï–¢–û–î–´ –î–õ–Ø –°–ò–°–¢–ï–ú–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô =====
    
    def create_system_user(self, username: str, password_hash: str, role: str = 'user', 
                          full_name: str = None, email: str = None, 
                          account_expires: str = None, created_by: int = None) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    INSERT INTO system_users (username, password_hash, role, full_name, email, 
                                            account_expires, created_by)
                    VALUES (?, ?, ?, ?, ?, ?, ?)
                ''', (username, password_hash, role, full_name, email, account_expires, created_by))
                
                conn.commit()
                logger.info(f"–°–æ–∑–¥–∞–Ω —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} —Å —Ä–æ–ª—å—é {role}")
                return True
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {e}")
            return False
    
    def get_system_user(self, username_or_id):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–æ username –∏–ª–∏ ID"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä —á–∏—Å–ª–æ–º (ID) –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π (username)
            if isinstance(username_or_id, int) or str(username_or_id).isdigit():
                # –ü–æ–∏—Å–∫ –ø–æ ID
                cursor.execute('''
                    SELECT id, username, password_hash, role, full_name, email, 
                           account_expires, is_active, created_at, last_login, created_by
                    FROM system_users 
                    WHERE id = ?
                ''', (int(username_or_id),))
            else:
                # –ü–æ–∏—Å–∫ –ø–æ username
                cursor.execute('''
                    SELECT id, username, password_hash, role, full_name, email, 
                           account_expires, is_active, created_at, last_login, created_by
                    FROM system_users 
                    WHERE username = ?
                ''', (username_or_id,))
            
            result = cursor.fetchone()
            if result:
                return {
                    'id': result[0],
                    'username': result[1],
                    'password_hash': result[2],
                    'role': result[3],
                    'full_name': result[4],
                    'email': result[5],
                    'account_expires': result[6],
                    'is_active': result[7],
                    'created_at': result[8],
                    'last_login': result[9],
                    'created_by': result[10]
                }
            return None
    
    def update_system_user_password(self, username: str, new_password_hash: str) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    UPDATE system_users SET password_hash = ? WHERE username = ?
                ''', (new_password_hash, username))
                
                conn.commit()
                logger.info(f"–ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
                return True
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –¥–ª—è {username}: {e}")
            return False
    
    def update_system_user_expiry(self, username: str, account_expires: str) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    UPDATE system_users SET account_expires = ? WHERE username = ?
                ''', (account_expires, username))
                
                conn.commit()
                logger.info(f"–í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {account_expires}")
                return True
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è –¥–ª—è {username}: {e}")
            return False
    
    def get_expired_accounts(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    SELECT id, username, full_name, email, account_expires, created_at
                    FROM system_users 
                    WHERE account_expires < datetime('now') AND is_active = 1
                    ORDER BY account_expires ASC
                ''')
                
                expired_accounts = []
                for row in cursor.fetchall():
                    expired_accounts.append({
                        'id': row[0],
                        'username': row[1],
                        'full_name': row[2],
                        'email': row[3],
                        'account_expires': row[4],
                        'created_at': row[5]
                    })
                
                return expired_accounts
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–µ–∫—à–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
            return []
    
    def deactivate_expired_accounts(self) -> int:
        """–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∏—Å—Ç–µ–∫—à–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    UPDATE system_users 
                    SET is_active = 0 
                    WHERE account_expires < datetime('now') AND is_active = 1
                ''')
                
                deactivated_count = cursor.rowcount
                conn.commit()
                
                logger.info(f"–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {deactivated_count} –∏—Å—Ç–µ–∫—à–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
                return deactivated_count
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
            return 0
    
    def get_all_system_users(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    SELECT id, username, role, full_name, email, account_expires, 
                           is_active, created_at, last_login, created_by
                    FROM system_users 
                    ORDER BY created_at DESC
                ''')
                
                users = []
                for row in cursor.fetchall():
                    users.append({
                        'id': row[0],
                        'username': row[1],
                        'role': row[2],
                        'full_name': row[3],
                        'email': row[4],
                        'account_expires': row[5],
                        'is_active': bool(row[6]),
                        'created_at': row[7],
                        'last_login': row[8],
                        'created_by': row[9]
                    })
                
                return users
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []
    
    def update_last_login(self, username: str) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    UPDATE system_users SET last_login = CURRENT_TIMESTAMP WHERE username = ?
                ''', (username,))
                
                conn.commit()
                return True
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—Ö–æ–¥–∞ –¥–ª—è {username}: {e}")
            return False

    def get_user_settings(self, user_id):
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT welcome_message, welcome_pdf_path, bot_token, bot_username, bot_name, bot_description, start_command, created_at, updated_at
                FROM user_settings 
                WHERE user_id = ?
            ''', (user_id,))
            
            result = cursor.fetchone()
            if result:
                return {
                    'welcome_message': result[0],
                    'welcome_pdf_path': result[1],
                    'bot_token': result[2],
                    'bot_username': result[3],
                    'bot_name': result[4],
                    'bot_description': result[5],
                    'start_command': result[6],
                    'created_at': result[7],
                    'updated_at': result[8]
                }
            else:
                # –°–æ–∑–¥–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cursor.execute('''
                    INSERT INTO user_settings (user_id, welcome_message, welcome_pdf_path, bot_token, bot_username, bot_name, bot_description, start_command)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                ''', (user_id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã', '', '', '', '–ú–æ–π –±–æ—Ç', '', '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.'))
                conn.commit()
                
                return {
                    'welcome_message': '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã',
                    'welcome_pdf_path': '',
                    'bot_token': '',
                    'bot_username': '',
                    'bot_name': '–ú–æ–π –±–æ—Ç',
                    'bot_description': '',
                    'start_command': '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.',
                    'created_at': datetime.now().isoformat(),
                    'updated_at': datetime.now().isoformat()
                }

    def update_user_welcome_message(self, user_id, message):
        """–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                UPDATE user_settings 
                SET welcome_message = ?, updated_at = ?
                WHERE user_id = ?
            ''', (message, datetime.now().isoformat(), user_id))
            conn.commit()
            return True

    def update_user_welcome_pdf(self, user_id, pdf_path):
        """–û–±–Ω–æ–≤–∏—Ç—å –ø—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                UPDATE user_settings 
                SET welcome_pdf_path = ?, updated_at = ?
                WHERE user_id = ?
            ''', (pdf_path, datetime.now().isoformat(), user_id))
            conn.commit()
            return True

    def update_user_bot_settings(self, user_id, bot_name, bot_description, start_command):
        """–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                UPDATE user_settings 
                SET bot_name = ?, bot_description = ?, start_command = ?, updated_at = ?
                WHERE user_id = ?
            ''', (bot_name, bot_description, start_command, datetime.now().isoformat(), user_id))
            conn.commit()
            return True

    def update_user_bot_token(self, user_id, bot_token, bot_username):
        """–û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –∏ username –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                UPDATE user_settings 
                SET bot_token = ?, bot_username = ?, updated_at = ?
                WHERE user_id = ?
            ''', (bot_token, bot_username, datetime.now().isoformat(), user_id))
            conn.commit()
            return True

    def get_users_for_bot(self, bot_user_id):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—â–∞–ª–∏—Å—å —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –±–æ—Ç–æ–º"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT DISTINCT u.id, u.username, u.first_name, u.last_name, u.created_at,
                       m.text as last_message_text, m.timestamp as last_message_time
                FROM users u
                INNER JOIN (
                    SELECT user_id, text, timestamp,
                           ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY timestamp DESC) as rn
                    FROM messages
                    WHERE bot_user_id = ?
                ) m ON u.id = m.user_id AND m.rn = 1
                ORDER BY u.created_at DESC
            ''', (bot_user_id,))
            
            users = []
            for row in cursor.fetchall():
                users.append({
                    'id': row[0],
                    'username': row[1],
                    'first_name': row[2],
                    'last_name': row[3],
                    'created_at': row[4],
                    'last_message_text': row[5],
                    'last_message_time': row[6]
                })
            return users

    def get_messages_between_users(self, user_id, bot_user_id):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –±–æ—Ç–æ–º"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT id, text, timestamp, is_from_user
                FROM messages
                WHERE user_id = ? AND bot_user_id = ?
                ORDER BY timestamp ASC
            ''', (user_id, bot_user_id))
            
            messages = []
            for row in cursor.fetchall():
                messages.append({
                    'id': row[0],
                    'text': row[1],
                    'timestamp': row[2],
                    'is_from_user': bool(row[3])
                })
            
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å –±–æ—Ç–æ–º {bot_user_id}")
            return messages

    def get_last_message_for_user(self, user_id, bot_user_id):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT id, text, timestamp, is_from_user
                FROM messages
                WHERE user_id = ? AND bot_user_id = ?
                ORDER BY timestamp DESC
                LIMIT 1
            ''', (user_id, bot_user_id))
            
            row = cursor.fetchone()
            if row:
                return {
                    'id': row[0],
                    'text': row[1],
                    'timestamp': row[2],
                    'is_from_user': bool(row[3])
                }
            return None


    def get_active_subscribers_count(self, bot_user_id, since_date):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –¥–∞—Ç—ã"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT COUNT(DISTINCT user_id) 
                FROM messages 
                WHERE bot_user_id = ? AND timestamp >= ? AND is_from_user = 1
            ''', (bot_user_id, since_date))
            return cursor.fetchone()[0] or 0

    def get_new_subscribers_count(self, bot_user_id, since_date):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –¥–∞—Ç—ã"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT COUNT(DISTINCT user_id) 
                FROM messages 
                WHERE bot_user_id = ? AND timestamp >= ? AND is_from_user = 1
                AND user_id NOT IN (
                    SELECT DISTINCT user_id 
                    FROM messages 
                    WHERE bot_user_id = ? AND timestamp < ? AND is_from_user = 1
                )
            ''', (bot_user_id, since_date, bot_user_id, since_date))
            return cursor.fetchone()[0] or 0

    def get_total_subscribers_count(self, bot_user_id):
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –±–æ—Ç–∞"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT COUNT(DISTINCT user_id) 
                FROM messages 
                WHERE bot_user_id = ? AND is_from_user = 1
            ''', (bot_user_id,))
            return cursor.fetchone()[0] or 0

    def get_messages_count_24h(self, bot_user_id, since_date):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT COUNT(*) 
                FROM messages 
                WHERE bot_user_id = ? AND timestamp >= ?
            ''', (bot_user_id, since_date))
            return cursor.fetchone()[0] or 0
