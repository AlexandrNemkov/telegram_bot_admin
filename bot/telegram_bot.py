import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from config import Config
import json
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class TelegramBot:
    def __init__(self):
        self.token = Config.TELEGRAM_TOKEN
        self.subscribers = set()
        self.welcome_message = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã"
        self.welcome_pdf_path = None
        self.load_data()
        
    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤"""
        try:
            if os.path.exists('data/subscribers.json'):
                with open('data/subscribers.json', 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.subscribers = set(data.get('subscribers', []))
            
            if os.path.exists('data/settings.json'):
                with open('data/settings.json', 'r', encoding='utf-8') as f:
                    settings = json.load(f)
                    self.welcome_message = settings.get('welcome_message', self.welcome_message)
                    self.welcome_pdf_path = settings.get('welcome_pdf_path')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª—ã"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            os.makedirs('data', exist_ok=True)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            subscribers_file = 'data/subscribers.json'
            with open(subscribers_file, 'w', encoding='utf-8') as f:
                json.dump({'subscribers': list(self.subscribers)}, f, ensure_ascii=False, indent=2)
            logger.info(f"–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {subscribers_file}: {len(self.subscribers)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            settings_file = 'data/settings.json'
            with open(settings_file, 'w', encoding='utf-8') as f:
                json.dump({
                    'welcome_message': self.welcome_message,
                    'welcome_pdf_path': self.welcome_pdf_path
                }, f, ensure_ascii=False, indent=2)
            logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {settings_file}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        username = update.effective_user.username or f"user_{user_id}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏
        self.subscribers.add(user_id)
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –ø–æ–¥–ø–∏—Å—á–∏–∫: {user_id} ({username})")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        self.save_data()
        logger.info(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(self.subscribers)}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(self.welcome_message)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å PDF —Ñ–∞–π–ª, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
        if self.welcome_pdf_path and os.path.exists(self.welcome_pdf_path):
            try:
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {self.welcome_pdf_path}")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                success = self.send_document_to_user(user_id, self.welcome_pdf_path, "welcome.pdf", "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üìÑ")
                
                if success:
                    logger.info(f"PDF —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF: {e}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
        keyboard = [
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='help')],
            [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", callback_data='support')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
    
    async def test_pdf_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF —Ñ–∞–π–ª–∞"""
        user_id = update.effective_user.id
        
        if self.welcome_pdf_path and os.path.exists(self.welcome_pdf_path):
            await update.message.reply_text("üìÑ –û—Ç–ø—Ä–∞–≤–ª—è—é PDF —Ñ–∞–π–ª...")
            
            success = self.send_document_to_user(user_id, self.welcome_pdf_path, "welcome.pdf", "–¢–µ—Å—Ç–æ–≤—ã–π PDF —Ñ–∞–π–ª üìÑ")
            
            if success:
                await update.message.reply_text("‚úÖ PDF —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF —Ñ–∞–π–ª–∞")
        else:
            await update.message.reply_text("‚ùå PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.")

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/status - –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
        """
        await update.message.reply_text(help_text)
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /status"""
        user_id = update.effective_user.id
        if user_id in self.subscribers:
            await update.message.reply_text("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –±–æ—Ç–∞!")
        else:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –±–æ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏.")
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data == 'help':
            await self.help_command(update, context)
        elif query.data == 'support':
            await query.edit_message_text("üìû –î–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    
    async def broadcast_message(self, message_text: str, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
        success_count = 0
        failed_count = 0
        
        for user_id in self.subscribers:
            try:
                await context.bot.send_message(chat_id=user_id, text=message_text)
                success_count += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                failed_count += 1
        
        return success_count, failed_count
    
    def update_welcome_message(self, new_message: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        self.welcome_message = new_message
        self.save_data()
    
    def update_welcome_pdf(self, pdf_path: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ PDF —Ñ–∞–π–ª–∞"""
        self.welcome_pdf_path = pdf_path
        self.save_data()
    
    def send_document_to_user(self, user_id: int, file_path: str, filename: str, caption: str = ""):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            import aiohttp
            import asyncio
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π event loop –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            async def send_document():
                async with aiohttp.ClientSession() as session:
                    url = f"https://api.telegram.org/bot{self.token}/sendDocument"
                    
                    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
                    with open(file_path, 'rb') as file:
                        files = {
                            'document': (filename, file, 'application/pdf')
                        }
                        data = {
                            'chat_id': user_id,
                            'caption': caption
                        }
                        
                        async with session.post(url, data=data, files=files) as response:
                            if response.status == 200:
                                result = await response.json()
                                if result.get('ok'):
                                    logger.info(f"–î–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                                    return True
                                else:
                                    logger.error(f"Telegram API –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {result}")
                                    return False
                            else:
                                logger.error(f"HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {response.status}")
                                return False
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
            result = loop.run_until_complete(send_document())
            loop.close()
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            return False

    def send_message_to_user(self, user_id: int, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            import aiohttp
            import asyncio
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π event loop –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            async def send_message():
                async with aiohttp.ClientSession() as session:
                    url = f"https://api.telegram.org/bot{self.token}/sendMessage"
                    data = {
                        'chat_id': user_id,
                        'text': message,
                        'parse_mode': 'HTML'
                    }
                    
                    async with session.post(url, json=data) as response:
                        if response.status == 200:
                            result = await response.json()
                            if result.get('ok'):
                                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                                return True
                            else:
                                logger.error(f"Telegram API –æ—à–∏–±–∫–∞: {result}")
                                return False
                        else:
                            logger.error(f"HTTP –æ—à–∏–±–∫–∞: {response.status}")
                            return False
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
            result = loop.run_until_complete(send_message())
            loop.close()
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            return False

    def get_subscribers_count(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
        return len(self.subscribers)
    
    def get_subscribers_list(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
        return list(self.subscribers)
    
    async def run_async(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not self.token:
            logger.error("TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            return
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            application = Application.builder().token(self.token).build()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            application.add_handler(CommandHandler("start", self.start_command))
            application.add_handler(CommandHandler("help", self.help_command))
            application.add_handler(CommandHandler("status", self.status_command))
            application.add_handler(CommandHandler("test_pdf", self.test_pdf_command))
            application.add_handler(CallbackQueryHandler(self.button_callback))
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
            await application.run_polling(allowed_updates=Update.ALL_TYPES)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            raise

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (–æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥)"""
        if not self.token:
            logger.error("TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            return
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            application = Application.builder().token(self.token).build()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            application.add_handler(CommandHandler("start", self.start_command))
            application.add_handler(CommandHandler("help", self.help_command))
            application.add_handler(CommandHandler("status", self.status_command))
            application.add_handler(CommandHandler("test_pdf", self.test_pdf_command))
            application.add_handler(CallbackQueryHandler(self.button_callback))
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
            application.run_polling(allowed_updates=Update.ALL_TYPES)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            raise

if __name__ == "__main__":
    bot = TelegramBot()
    bot.run()
